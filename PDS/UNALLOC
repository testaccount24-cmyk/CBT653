*          DATA SET D3UNALLP   AT LEVEL 001 AS OF 12/17/87
******************************************************************
*  D3UNALLP:                                                     *
*   THIS IS A SUBROUTINE TO DYNAMICALLY DEALLOCATE DDNAMES,      *
*   DATASETS OR MEMBERS.                                         *
*  WRITTEN........: MAY 25, 1984                                 *
*  AUTHOR.........: JIM HARRISON/DRMB                            *
******************************************************************
*                      REGISTERS                                 *
******************************************************************
*        4 - BASE REGISTER                                       *
*        5 - FIELD LEN FOR 'EX' INSTR.  INDEX IN 'LA' INST       *
*        6 - PARAMETER ADDRESSING                                *
*        7 - 'BAL' RETURN ADDRESS                                *
*       10 - TEXT-UNIT ADDRESS LIST POINTER  (DYN1TUP)           *
*       13 - SAVE AREA                                           *
*       15 - POINTER TO ACUTAL TEXT-UNIT DATA (DYN1TU)           *
******************************************************************
*  REVISION LOG:                                                 *
*  12/87:  INCREASED LENGTH OF DSNAME PARAMETER AND CHANGED      *
*          TEXT UNIT BUILDING TO USE SUBROUTINES SIMILAR TO      *
*          D3ALLOCP (DDALLOC)                          JRH       *
******************************************************************
D3UNALLP CSECT
         REGS
         SAVE  (14,12)
         LR    R4,R15              GET ENTRY POINT
         USING D3UNALLP,R4         USE R4 AS BASE
*
         LA    R5,SAVEAREA         PUT ADDRESS OF OUR SAVE AREA IN R
         ST    R5,8(R13)           STORE OUR SA ADDR IN CALLER SA
         ST    R13,SAVEAREA+4      STORE CALLERS SA ADDR IN OURS
         LR    R13,R5              LOAD OUR SA ADDR IN R13
         USING SAVEAREA,R13         BASE REGISTER = 13
*
         L     R6,0(1)
         USING PARMS,R6
*
         CLI   FIRST_TIME,C'Y'
         BNE   INIT_RTN
         MVI   FIRST_TIME,C'N'
INIT_RTN EQU   *
***
***  ZERO OUT CONTROL BLOCKS
***
         XC    DYN1RBP,DYN1RBP
         XC    DYN1RB,DYN1RB
         XC    DYN1TUP,DYN1TUP
         XC    DYN1TU,DYN1TU
***
***  GET ADDRESS OF REQUEST BLOCK AND STORE IN REQUEST BLOCK PTR
***
         LA    R15,DYN1RB              LOAD ADDRESS OF S99RB
         ST    R15,DYN1RBP             AND STORE IN RB POINTER
         OI    DYN1RBP,X'80'           SET HIGH ORDER BIT 'ON'
         USING S99RB,R15
***
*** FILL IN THE REQUEST BLOCK
***
         MVI   S99RBLN,20              LIST LENGTH(20)
         MVI   S99VERB,S99VRBUN
         LA    R0,DYN1TUP             LOAD ADDRESS OF TU POINTERS
         ST    R0,S99TXTPP            STORE ADDRESS IN S99 RB
***
         LA    R15,DYN1TU         ADDRESS OF TEXT UNITS
         USING S99TUNIT,R15       USE S99TUNIT DSECT FOR ADDRESSING
***
         LA    R10,DYN1TUP        ADDRESS OF TEXT UNITS POINTERS
***********************************************************************
**   DSNAME TEXT UNIT   X'0002'                                      **
***********************************************************************
         CLI   DSNAME,C' '
         BE    BLDDDNM
         MVC   WORK_FIELD(44),DSNAME     MOVE DSNAME TO WORK FIELD
         BAL   R7,FIND_LENGTH            GET LENGTH OF DSNAME
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         MVI   S99TUKEY+1,DUNDSNAM     SET TEXT KEY FOR DATASET NAME
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE IN LENGTH OF DSN
         MVC   WORK_FIELD(44),SPACES
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**   DDNAME TEXT UNIT   X'0001'                                      **
***********************************************************************
BLDDDNM  EQU   *
         CLI   DDNAME,C' '             CHECK FOR DDNAME PARM
         BE    BLDMEM                    NO? SKIP TO MEMBER TEXT UNIT
         MVC   WORK_FIELD(8),DDNAME     MOVE DDNAME TO WORK FIELD
         BAL   R7,FIND_LENGTH            GET LENGTH IN R5
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         MVI   S99TUKEY+1,DUNDDNAM     SET TEXT KEY FOR DDNAME
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE TO LENGTH FIELD
         MVC   WORK_FIELD(8),SPACES
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**   MEMBER TEXT UNIT   X'0003'                                      **
***********************************************************************
BLDMEM   EQU   *
         CLI   MEMNAME,C' '           CHECK FOR MEMBER NAME
         BE    DEALLOC
         MVC   WORK_FIELD(8),MEMNAME    MOVE DDNAME TO WORK FIELD
         BAL   R7,FIND_LENGTH            GET LENGTH IN R5
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         MVI   S99TUKEY+1,DUNMEMBR     SET TEXT KEY FOR MEMBER NAME
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE TO LENGTH FIELD
         MVC   WORK_FIELD(8),SPACES
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**   UNALLOC FUNCTION X'0007' / REMOVE IN-USE ATTR X'0008'           **
***********************************************************************
DEALLOC  EQU   *
         MVI   S99TUKEY+1,DUNUNALC     SET KEY TO UNALLOCATE
         MVI   S99TUNUM+1,0            SET NUMBER FIELD = 0
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**   WRAP UP / SVC CALL                                              **
***********************************************************************
WRAPUP   EQU   *
         L     R0,=F'-4'        BACK UP 4 BYTES,
         LA    R10,0(R0,R10)    USING R0 AS AN INDEX REGISTER..AND:
         OI    0(R10),X'80'    SET HIGH ORDER BIT ON LAST TU ADDRESS
         LA    R1,DYN1RBP       POINT TO REQUEST BLOCK
*
         SVC   99                 R15 WILL HAVE THE RETURN CODE
*
         LA    R8,DYN1RB
         USING S99RB,8
         LH    R0,S99ERROR
         STH   R0,SVCERROR
*------------------------------------------------------------*
EXIT     EQU    *
         L     R13,SAVEAREA+4
         RETURN (14,12),,RC=(15)
*------------------------------------------------------------*
FIRST_TIME                        DC  C'Y'
SAVEAREA                          DC  18F'0'
UPDATE_POINTER_RETURN_ADDR        DS  F
WORK_FIELD                        DC  CL44' '
SPACES                            DC  CL44' '
*
DYN1DS    DS   0F                      SVC 99 CONTROL BLOCKS
DYN1RBP   DS   F                       SVC 99 REQ BLOCK POINTER
DYN1RB    DS   5F                      SVC 99 REQUEST BLOCK
DYN1TUP   DS   CL255                   SPACE FOR TEXT POINTERS
DYN1TU    DS   CL255                   SPACE FOR TEXT UNITS
DYN1LEN   EQU  *-DYN1RBP               LENGTH OF SPACE USED
*
*
*
*****************************************************************
*** THIS SUBROUTINE IS ENTERED VIA AN 'EX' INSTRUCTION TO ALLOW
*** VARIABLE LENGTH MOVES OF PARM DATA TO THE TEXT-UNIT AREA.
*****************************************************************
*
MOVE_PARM  EQU  *
         MVC   S99TUPAR(0),WORK_FIELD
*
         EJECT
*
*
*****************************************************************
***  THIS SUBROUTINE STORES THE ADDRESS OF THE JUST BUILT TEXT-
***  UNIT IN OUR LIST OF ADDRESSES. THEN IT BUMPS UP THE POINTER
***  (R10) 4 BYTES TO POINT TO THE NEXT POSITON IN THE LIST.
***  IT ALSO INCREMENTS R15 BY THE LENGTH OF THE JUST STORED
***  TEXT UNIT TO POINT TO THE NEXT UNUSED AREA.  THE OFFSET
***  OF 6 IS FAIRLY CONSTANT.  R5 IS USED AS AN INDEX TO INCREASE
***  INCREASE OR DECREASE THE DISPLACEMENT. (CAN BE POSITIVE OR
***  NEGATIVE !!).  IT IS SET JUST BEFORE EACH 'BAL'.
*****************************************************************
*
*
UPDATE_POINTERS  EQU  *
         ST    R7,UPDATE_POINTER_RETURN_ADDR
         ST    R15,0(R10)              STORE TEXT UNIT ADDRESS
         LA    R10,4(R10)              BUMP UP TEXT POINTER POSITION
         LA    R15,6(R5,R15)           POINT TO NEXT TEXT UNIT POSITION
         L     R7,UPDATE_POINTER_RETURN_ADDR
         BR    R7
         EJECT
***
*****************************************************************
***  SUBROUTINE TO FIND LENGTH OF PARAMETER VALUE
*****************************************************************
***
FIND_LENGTH EQU  *
         LA    R5,WORK_FIELD+43          POINT TO END OF WORK FIELD
         LA    R0,WORK_FIELD             POINT TO START OF WORK FIELD
CHECK_SPACE EQU *
         CLI   0(R5),X'40'        CHECK FOR SPACES
         BNE   FOUND_END          NOT SPACE? THEN WE'RE DONE
         BCT   R5,CHECK_SPACE     DECREMENT WORK FIELD POINTER
*                                 AND CHECK NEXT POSITION
FOUND_END EQU *
         SR    R5,R0              SUBTRACT END LENGTH FROM START
         BR    R7                 TO GIVE US LENGTH OF FIELD
         EJECT
*
* DSECT MACRO
         IEFZB4D0
*
* MNEMONICS MACRO
         IEFZB4D2
*
**********************************************************************
*   ALLOCATION PARAMETERS                                            *
**********************************************************************
PARMS    DSECT
PARMINFO DS    0C
DDNAME   DS    CL08
DSNAME   DS    CL44
MEMNAME  DS    CL08
SVCERROR DS    CL2
*
         CSECT          PANVALET TIME STAMP
PANVALET DC    CL47'001D3UNALLP  12/17/87 COMPILED 88146 - 13:25:22'
         END   D3UNALLP
