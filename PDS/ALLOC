*          DATA SET D3ALLOCP   AT LEVEL 001 AS OF 06/22/89
*          DATA SET D3ALLOCP   AT LEVEL 001 AS OF 05/09/89
*          DATA SET D3ALLOCP   AT LEVEL 001 AS OF 03/17/88
 TITLE 'D3ALLOCP: DYNAMIC ALLOCATION UTILITY'
******************************************************************
*********  DYNAMIC ALLOCATION UTILITY                 ************
******************************************************************
*  WRITTEN:         NOV 14, 1984                                 *
*  AUTHOR:          JIM HARRISON                                 *
*  AUTHOR:          OSI, OSIE, DDA, DRMB                         *
*  FOR MORE INFORMATION...: IBM OS/VS2 SPL:JOB MANAGEMENT        *
******************************************************************
*********              REGISTERS                      ************
******************************************************************
*        4 - BASE REGISTER                                       *
*        5 - FIELD LEN FOR 'EX' INSTR.  INDEX IN 'LA' INST       *
*        6 - PARAMETER ADDRESSING                                *
*        7 - 'BAL' RETURN ADDRESS                                *
*        8 - GETMAINED STORAGE ADDRESS                           *
*       10 - TEXT-UNIT ADDRESS LIST POINTER  (DYN1TUP)           *
*       15 - POINTER TO ACUTAL TEXT-UNIT DATA (DYN1TU)           *
******************************************************************
*  REVISION LOG:                                                 *
*  11/87:  ADDED ADDITIONAL PARMS AND RE-ORGANIZED PROCESSING    *
*          INTO MORE LOGICAL SUBROUTINES. INCREASED LENGTH OF    *
*          DSNAME FIELD TO 44 CHAR.                    JRH       *
*  3/88:   UNCONDITIONAL DISP PROCESSING WAS BRANCHING TO UNCATLG*
*          RTN WHETHER CATLG OR UNCATLG REQUESTED. FIXED. SHL    *
*  7/88:   ADDED ANOTHER PRIMARY SPACE FIELD USING THE EXISTING  *
*          FILLER TO ALLOW FOR LARGER ALLOCATIONS     JRH.       *
*  9/88: - ADDED GETMAIN/FREEMAIN LOGIC TO MAKE IT RE-ENTRANT    *
*        - COND DISP OF KEEP FELL THRU TO DELETE!!! FIXED. JRH   *
*        - WORK FIELD NEEDS TO BE INITED TO SPACES BEFORE EACH   *
*          BRANCH TO THAT ROUTINE.                               *
******************************************************************
         EJECT
         PRINT NOGEN
D3ALLOCP CSECT
         REGS
         SAVE  (14,12)
         LR    R4,R15              GET ENTRY POINT
         USING D3ALLOCP,R4         USE R4 AS BASE
*
         L     R6,0(1)
         USING PARMS,R6
*
         LA    R0,MLENGTH
         GETMAIN  R,LV=(0)
         LTR   R15,R15
         BZ    GOT_IT
         ABEND 106
GOT_IT     EQU *
         LR    R8,R1       ADDRESS OF GETMAINED AREA IN R1
         USING MEMORY,R8       GETMAIN DSECT
         ST    R8,GETMAIN_ADDR
GOT_MEMORY EQU *
         ST    R8,8(R13)           STORE OUR SA ADDR IN CALLER SA
         ST    R13,4(R8)           STORE CALLERS SA ADDR IN OURS
         LR    R13,R8              LOAD OUR SA ADDR IN R13
*
INIT_PROCESSING  EQU  *
***
***  ZERO OUT CONTROL BLOCKS
***
         XC    DYN1RBP(4),DYN1RBP
         XC    DYN1RB(20),DYN1RB
         XC    DYN1TUP(255),DYN1TUP
         XC    DYN1TU(255),DYN1TU
         XC    BLOCKSIZE_SAVE,BLOCKSIZE_SAVE
         XC    DOUB,DOUB
         XC    FWORD,FWORD
***
***  GET ADDRESS OF REQUEST BLOCK AND STORE IN REQUEST BLOCK PTR
***
         LA    R15,DYN1RB              LOAD ADDRESS OF S99RB
         ST    R15,DYN1RBP             AND STORE IN RB POINTER
         OI    DYN1RBP,X'80'           SET HIGH ORDER BIT 'ON'
         USING S99RB,R15
***
*** FILL IN THE REQUEST BLOCK
***
         MVI   S99RBLN,20              LIST LENGTH(20)
         MVI   S99VERB,S99VRBAL        VERB CODE(01)
         LA    R0,DYN1TUP             LOAD ADDRESS OF TU POINTERS
         ST    R0,S99TXTPP            STORE ADDRESS IN S99 RB
***
         LA    R15,DYN1TU         ADDRESS OF TEXT UNITS
         USING S99TUNIT,R15       USE S99TUNIT DSECT FOR ADDRESSING
***
         LA    R10,DYN1TUP        ADDRESS OF TEXT UNITS POINTERS
*                                 NO DSECT NEEDED
         EJECT
***********************************************************************
**     MAINLINE PROCESSING                                           **
***********************************************************************
         BAL   R7,DCB_PROCESSING       PROCESS DCB INFO FOR ALL
*                                      REQUESTS
*
         CLI   DSNAME,C'*'             CHECK FOR TERMINAL ALLOCATION
         BE    SYSOUR
         CLC   DSNAME,=C'TERM'         CHECK FOR TERMINAL ALLOCATION
         BE    SYSOUR
         CLC   DSNAME(5),=C'DUMMY'
         BE    DUMMY
         CLC   DSNAME(6),=C'SYSOUT'
         BE    SYSOUT
***********************************************************************
**     DATASET PROCESSING : TU = X'0002'                             **
***********************************************************************
         CLI   DSNAME,C' '
         BE    INITIAL_STATUS_PROCESSING
         MVC   WORK_FIELD(44),SPACES
         MVC   WORK_FIELD(44),DSNAME     MOVE DSNAME TO WORK FIELD
         BAL   R7,FIND_LENGTH            GET LENGTH OF DSNAME
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         MVI   S99TUKEY+1,DALDSNAM     SET TEXT UNIT KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE IN LENGTH OF DSN
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**     DATA SET INITIAL STATUS   X'0004' 01=OLD 02=MOD 04=NEW 08=SHR **
***********************************************************************
INITIAL_STATUS_PROCESSING  EQU  *
         CLI   INIT,C' '
         BE    NORMAL_DISP_PROCESSING
         MVI   S99TUKEY+1,DALSTATS
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            MOVE IN LENGTH
         CLI   INIT,C'O'
         BE    OLD
         CLI   INIT,C'M'
         BE    MOD
         CLI   INIT,C'N'
         BE    NEW
SHR      EQU   *
         MVI   S99TUPAR,X'08'          STATUS = SHR
         B     ENDSTAT
OLD      EQU   *
         MVI   S99TUPAR,X'01'          STATUS = OLD
         B     ENDSTAT
MOD      EQU   *
         MVI   S99TUPAR,X'02'          STATUS = MOD
         B     ENDSTAT
NEW      EQU   *
         MVI   S99TUPAR,X'04' STATUS = NEW
ENDSTAT  EQU   *
         LA    R5,1
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**     NORMAL DISP. X'0005' ///           02=CAT 04=DELETE 08=KEEP   **
***********************************************************************
NORMAL_DISP_PROCESSING EQU *
         CLI   NORM,C' '
         BE    COND_DISP_PROCESSING
         MVI   S99TUKEY+1,DALNDISP
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            MOVE IN LENGTH
         CLI   NORM,C'D'
         BE    ND_DEL
         CLI   NORM,C'C'
         BE    ND_CATLG
         CLI   NORM,C'U'
         BE    ND_UNCATLG
ND_KEEP  EQU   *
         MVI   S99TUPAR,X'08'          DEFAULT IS KEEP
         B     ENDDISP
ND_CATLG EQU   *
         MVI   S99TUPAR,X'02'          CATALOG
         B     ENDDISP
ND_UNCATLG EQU   *
         MVI   S99TUPAR,X'01'          UNCATALOG
         B     ENDDISP
ND_DEL   EQU   *
         MVI   S99TUPAR,X'04'          DEL STATUS
ENDDISP  EQU   *
         LA    R5,1
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**     DATA SET CONDITIONAL DISP X'0006'                             **
***********************************************************************
COND_DISP_PROCESSING  EQU  *
         CLI   COND,C' '
         BE    SPACE_TYPE_PROCESSING
         MVI   S99TUKEY+1,DALCDISP
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            MOVE IN LENGTH
         CLI   COND,C'U'               CHECK FOR TYPE OF REQUEST
         BE    CD_UNCAT                BRANCH TO APPROPRIATE RTN
         CLI   COND,C'C'
         BE    CD_CATLG
         CLI   COND,C'D'
         BE    CD_DEL
CD_KEEP  EQU   *
         MVI   S99TUPAR,X'08'          DEFAULT: KEEP
         B     ENDCOND
CD_DEL   EQU   *
         MVI   S99TUPAR,X'04'          DELETE
         B     ENDCOND
CD_UNCAT EQU   *
         MVI   S99TUPAR,X'01'          UNCATALOG
         B     ENDCOND
CD_CATLG EQU   *
         MVI   S99TUPAR,X'02'          CATALOG
ENDCOND  EQU   *
         LA    R5,1
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       SPACE TYPE: TRACKS/CYL/BLOCKS                               **
***********************************************************************
SPACE_TYPE_PROCESSING EQU *
         CLI   TYPE,C' '
         BE    RLSE_PROCESSING
         CLI   TYPE,C'C'
         BE    ALLOC_IN_CYLS
         CLI   TYPE,C'B'
         BE    ALLOC_IN_BLKS
ALLOC_IN_TRKS EQU  *
         MVI   S99TUKEY+1,DALTRK       CYLINDERS
         B     END_SPACE_TYPE
ALLOC_IN_CYLS EQU  *
         MVI   S99TUKEY+1,DALCYL       CYLINDERS
         B     END_SPACE_TYPE
ALLOC_IN_BLKS EQU  *                   BLOCKS
         MVI   S99TUKEY+1,DALBLKLN
         MVI   S99TUNUM+1,1
         MVI   S99TULNG+1,3            MOVE IN LENGTH
         LH    R0,BLOCKSIZE_SAVE
         STCM  R0,B'0011',S99TUPAR+1
         LA    R5,3
         BAL   R7,UPDATE_POINTERS
         B     PRIMARY_SPACE_PROCESSING
END_SPACE_TYPE EQU *
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**       PRIMARY SPACE QUANTITY X'000A'                              **
***********************************************************************
PRIMARY_SPACE_PROCESSING EQU  *
         CLI   PRISPC,C' '
         BE    CK_PRISPC2
         PACK  DOUB,PRISPC
         B     ST_PRISPC
CK_PRISPC2               EQU  *
         CLI   PRISPC2,C' '
         BE    SECONDARY_SPACE_PROCESSING
         PACK  DOUB,PRISPC2
ST_PRISPC      EQU *
         CVB   R5,DOUB
         ST    R5,FWORD
         MVI   S99TUKEY+1,DALPRIME     SET KEY FIELD = PRIMARY SPACE
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,3            SET LENGTH FIELD
         MVC   S99TUPAR(3),FWORD+1     SET PRIMARY SPACE = PARM
         LA    R5,3
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       SECONDARY SPACE QUANTITY  X'000B'                           **
***********************************************************************
SECONDARY_SPACE_PROCESSING EQU  *
         CLI   SECSPC,C' '
         BE    RLSE_PROCESSING
         PACK  DOUB,SECSPC
         CVB   R5,DOUB
         ST    R5,FWORD
         MVI   S99TUKEY+1,DALSECND     SET KEY FIELD = SECONDARY SPACE
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,3            SET LENGTH FIELD
         MVC   S99TUPAR(3),FWORD+1     SET SECONDARY SPACE = PARM
         LA    R5,3
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       UNUSED SPACE RELEASE (RLSE)  X'000D'                        **
***********************************************************************
RLSE_PROCESSING EQU *
         CLI   RLSE_FLAG,C'Y'
         BNE   FORMAT_PROCESSING
         MVI   S99TUKEY+1,DALRLSE      TURN ON RELEASE INDICATOR
*        MVI   S99TUNUM+1,0            SET NUMBER FIELD
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**       FORMAT OF SPACE (IE: CONTIG) X'000E'                        **
***********************************************************************
FORMAT_PROCESSING EQU *
         CLI   SPACE_FORMAT,C' '
         BE    ROUND_PROCESSING
         MVI   S99TUKEY+1,DALSPFRM
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            MOVE IN LENGTH
         CLC   SPACE_FORMAT(3),=C'ALX'
         BE    ALX
         CLC   SPACE_FORMAT(4),=C'MXIG'
         BE    MXIG
         CLC   SPACE_FORMAT(4),=C'CONT'
         BE    CONTIG
         B     UNIT_PROCESSING
ALX      EQU   *
         MVI   S99TUPAR,X'02'
         B     END_FORMAT
MXIG     EQU   *
         MVI   S99TUPAR,X'04'
         B     END_FORMAT
CONTIG   EQU   *
         MVI   S99TUPAR,X'08'
         B     END_FORMAT
END_FORMAT   EQU *
         LA    R5,1
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       ROUND                        X'000F'                        **
***********************************************************************
ROUND_PROCESSING EQU *
         CLI   ROUND_FLAG,C'Y'
         BNE   UNIT_PROCESSING
         MVI   S99TUKEY+1,DALROUND
*        MVI   S99TUNUM+1,0
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**       UNIT  X'0015'                                               **
***********************************************************************
UNIT_PROCESSING EQU  *
         CLI   UNIT,C' '
         BE    VOLSER_PROCESSING
         MVI   S99TUKEY+1,DALUNIT      SET KEY FIELD
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVC   WORK_FIELD(44),SPACES
         MVC   WORK_FIELD(6),UNIT
         BAL   R7,FIND_LENGTH            GET LENGTH OF DEVICE
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE IN LENGTH OF DEVICE
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       VOL SER   X'0010'                                           **
***********************************************************************
VOLSER_PROCESSING EQU *
         CLI   VOLSER,C' '
         BE    DDNAME_PROCESSING
         MVI   S99TUKEY+1,DALVLSER     SET KEY FIELD
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVC   WORK_FIELD(44),SPACES
         MVC   WORK_FIELD(6),VOLSER
         BAL   R7,FIND_LENGTH            GET LENGTH OF VOLSER
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE IN LENGTH OF VOLSER
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**   DDNAME TEXT UNIT   X'0001'   OPTIONAL                           **
***********************************************************************
DDNAME_PROCESSING  EQU  *
         CLI   DDNAME,C' '
         BE    CLOSE_PROCESSING
         MVI   S99TUKEY+1,DALDDNAM     SET TEXT UNIT KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVC   WORK_FIELD(44),SPACES
         MVC   WORK_FIELD(8),DDNAME
         BAL   R7,FIND_LENGTH            GET LENGTH OF DDNAME
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE IN LENGTH OF DSN
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       CLOSE PROCESSING             X'001C'                        **
***********************************************************************
CLOSE_PROCESSING EQU *
         CLI   CLOSE_FLAG,C'Y'
         BNE   PDS_MEMBER_PROCESSING
         MVI   S99TUKEY+1,DALCLOSE
*        MVI   S99TUNUM+1,0
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**  MEMNAME TEXT UNIT   X'0003'  OPTIONAL                            **
***********************************************************************
PDS_MEMBER_PROCESSING EQU *
         CLI   MEMNAME,C' '
         BE    PERMATTR
         MVI   S99TUKEY+1,DALMEMBR     SET TEXT UNIT KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVC   WORK_FIELD(44),SPACES
         MVC   WORK_FIELD(8),MEMNAME
         BAL   R7,FIND_LENGTH            GET LENGTH OF MEMBER
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE IN LENGTH OF MEMBER
         BAL   R7,UPDATE_POINTERS
         EJECT
***
***  TURN ON PERMANENT ATTRIBUTE                                     **
***
PERMATTR EQU   *
         MVI   S99TUKEY+1,DALPERMA     SET TEXT UNIT KEY TO PERMANENT
         MVI   S99TUNUM+1,X'00'        SET NUMBER FIELD
         ST    R15,0(R10)              STORE TEXT UNIT ADDRESS
         OI    0(R10),X'80'           SET HIGH ORDER BIT ON LAST ADDR
         LA    R1,DYN1RBP              POINT TO REQUEST BLOCK
*
         SVC   99                DYNAMIC ALLOCATION SVC
         ST    R15,RETURN_CODE_SAVE
*
         LA    R11,DYN1RB
         USING S99RB,11
         LH    R0,S99ERROR
         STCM  R0,B'0011',SVCERROR
*------------------------------------------------------------*
EXIT     EQU    *
         L     R13,SAVEAREA+4
         L     R10,RETURN_CODE_SAVE
         LA    R0,MLENGTH
         L     R8,GETMAIN_ADDR
         FREEMAIN  R,LV=(0),A=(8)
         LR    R15,R10              RETURN CODE FROM R10 ABOVE
         RETURN (14,12),,RC=(15)
*------------------------------------------------------------*
         EJECT
***********************************************************************
**  SUBROUTINES                                                      **
***********************************************************************
*
***********************************************************************
**  TERMINAL SPECIFITION (SYSOUR)   X'0028' USED ONLY W/DDNAME       **
***********************************************************************
SYSOUR   EQU   *
         MVI   S99TUKEY+1,DALTERM      SET KEY FIELD = TERMINAL
*        MVI   S99TUNUM+1,0            SET NUMBER FIELD
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
         B     DDNAME_PROCESSING
***********************************************************************
**  DUMMY (NULLFILE)               X '0024' USED ONLY W/DDNAME       **
***********************************************************************
DUMMY    EQU   *
         MVI   S99TUKEY+1,DALDUMMY     SET KEY FIELD = DUMMY
*        MVI   S99TUNUM+1,0            SET NUMBER FIELD
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
         B     DDNAME_PROCESSING
         EJECT
***********************************************************************
**  SYSOUT    X'0018'                                                **
***********************************************************************
SYSOUT   EQU   *
         MVI   S99TUKEY+1,DALSYSOU     SET KEY FIELD = SYSOUT
         CLI   SYSOCLAS,C' '          CHECK FOR SYSOUT CLASS
         BE    NOCLASS
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            MOVE IN LENGTH
         MVC   S99TUPAR(1),SYSOCLAS    MOVE IN SYSOUT CLASS
NOCLASS  EQU   *
         LA    R5,2
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**  SYSOUT COPIES   X'001D'                                          **
***********************************************************************
SYSOUT_COPIES  EQU   *
         CLI   SYSOCOPY,C' '
         BE    SYSOUT_HOLD
         MVI   S99TUKEY+1,DALCOPYS
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            MOVE IN LENGTH
         IC    R0,SYSOCOPY+1           MOVE # COPIES INTO PARM
         STC   R0,S99TUPAR
*        MVC   S99TUPAR(1),SYSOCOPY    MOVE IN NUMBER OF COPIES
         LA    R5,2
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**  SYSOUT HOLD     X'0059'                                          **
***********************************************************************
SYSOUT_HOLD  EQU   *
         CLI   SYSODISP,C' '
         BE    SYSOUT_DEST
         MVI   S99TUKEY+1,DALSHOLD
*        MVI   S99TUNUM+1,0            SET NUMBER FIELD
         L     R5,=F'-2'
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**  SYSOUT DEST     X'0058'                                          **
***********************************************************************
SYSOUT_DEST  EQU   *
         CLI   SYSODEST,C' '
         BE    DDNAME_PROCESSING
         MVI   S99TUKEY+1,DALSUSER
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVC   WORK_FIELD(44),SPACES
         MVC   WORK_FIELD(8),SYSODEST
         BAL   R7,FIND_LENGTH            GET LENGTH OF MEMBER
         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'
         A     R5,=F'1'                ADD 1 TO LENGTH
         STH   R5,S99TULNG             MOVE IN LENGTH OF MEMBER
         BAL   R7,UPDATE_POINTERS
         B     DDNAME_PROCESSING
         EJECT
***********************************************************************
**       BUILD DCB ATTRIBUTES                                        **
***********************************************************************
DCB_PROCESSING    EQU  *
         ST    R7,DCB_RETURN_ADDR
EROPT_PROCESSING  EQU  *             KEY = X'0049'
         CLI   EROPT,C' '
         BE    BUFNO_PROCESSING
         MVI   S99TUKEY+1,DALEROPT     SET KEY FIELD
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            SET LENGTH FIELD
         CLC   EROPT(2),=C'SK'
         BE    SKIP_EROPT
         CLC   EROPT(2),=C'AC'
         BE    ACCEPT_EROPT
         MVI   S99TUPAR,X'20'     ABEND
         B     END_EROPT
SKIP_EROPT EQU   *
         MVI   S99TUPAR,X'40'     SKIP
         B     END_EROPT
ACCEPT_EROPT EQU   *
         MVI   S99TUPAR,X'80'     ACCEPT
END_EROPT EQU   *
         LA    R5,1
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       BUFNO PARAMETER   X'0034'                                   **
***********************************************************************
BUFNO_PROCESSING EQU   *
         CLI   BUFNO,C' '
         BE    LRECL_PROCESSING
         CLC   BUFNO,=C'000'
         BE    LRECL_PROCESSING
         MVI   S99TUKEY+1,DALBUFNO
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            MOVE IN LENGTH
         IC    R0,BUFNO+1              MOVE # BUFFERS
         STC   R0,S99TUPAR
         LA    R5,2
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**       LRECL  X'0042'                                              **
***********************************************************************
LRECL_PROCESSING EQU   *
         CLC   LRECL,=C'00000'
         BE    BLKSIZE_PROCESSING
         CLC   LRECL,=C'     '
         BE    BLKSIZE_PROCESSING
         PACK  DOUB,LRECL
         CVB   R5,DOUB
         ST    R5,FWORD
         MVI   S99TUKEY+1,DALLRECL     SET KEY FIELD
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,2            SET LENGTH FIELD
         MVC   S99TUPAR(2),FWORD+2     MOVE IN LRECL REQUESTED
         LA    R5,2
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       BLKSIZE  X'0030'                                            **
***********************************************************************
BLKSIZE_PROCESSING EQU  *
         CLC   BLKSIZE,=C'00000'
         BE    DSORG_PROCESSING
         CLC   BLKSIZE,=C'     '
         BE    DSORG_PROCESSING
         PACK  DOUB,BLKSIZE
         CVB   R5,DOUB
         ST    R5,FWORD
         STH   R5,BLOCKSIZE_SAVE
         MVI   S99TUKEY+1,DALBLKSZ     SET KEY FIELD
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,2            SET LENGTH FIELD
         MVC   S99TUPAR(2),FWORD+2     SET BLOCKSIZE = PARM
         LA    R5,2
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**     DATA SET ORGANIZATION  X'003C'
***********************************************************************
DSORG_PROCESSING EQU  *
         CLI   DSORG,C' '
         BE    RECFM_PROCESSING
         MVI   S99TUKEY+1,DALDSORG
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,2            SET LENGTH
         CLC   DSORG,=C'VS'
         BE    VSAM
         CLI   DSORG,C'D'
         BE    DIRECT_ACCESS
         CLC   DSORG,=C'PO'
         BE    PDS
*        CLC   DSORG,=C'PS'
*        BE    SEQ
SEQ      EQU   *
         MVI   S99TUPAR,X'40'      SEQUENTIAL DEFAULT
         B     CHECK_UNMOVABLE
DIRECT_ACCESS EQU   *
         MVI   S99TUPAR,X'20'
         B     CHECK_UNMOVABLE
PDS      EQU   *
         MVI   S99TUPAR,X'02'      PARTITIONED
         B     CHECK_UNMOVABLE
VSAM     EQU   *
         MVI   S99TUPAR+1,X'08'    VSAM (NOTE: THIS IS IN SECOND BYTE)
         B     ENDDSORG
CHECK_UNMOVABLE EQU *
         CLI   DSORG+2,C'U'        IF UNMOVEABLE REQUESTED
         BNE   ENDDSORG            'ORING' WITH X'01' WILL CREATE
         OI    S99TUPAR,X'01'      THE REQUIRED VALUE
ENDDSORG  EQU *
         LA    R5,2
         BAL   R7,UPDATE_POINTERS
***********************************************************************
**       RECFM    X'0049'                                            **
***********************************************************************
RECFM_PROCESSING EQU  *
         CLI   RECFM,C' '
         BE    DIRQTY_PROCESSING
         MVI   S99TUKEY+1,DALRECFM     SET KEY FIELD
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            SET LENGTH FIELD
*
         CLI   RECFM,C'U'
         BE    UNDEF_RECFM
         CLI   RECFM,C'F'
         BE    F_RECFM
         CLI   RECFM,C'V'
         BE    V_RECFM
F_RECFM EQU   *                    SET UP INITIAL RECFM VALUES FOR
         MVI   S99TUPAR,X'80'      FIEXED, VARIABLE OR UNDEFINDED
         B     CHECK_BLOCKING
V_RECFM EQU   *
         MVI   S99TUPAR,X'40'
         B     CHECK_BLOCKING
UNDEF_RECFM  EQU  *
         MVI   S99TUPAR,X'C0'      UNDEF REQUIRES NO MORE PROCESSING
         B     END_RECFM
*
CHECK_BLOCKING EQU *               IF BLOCKING REQUESTED, 'ORING'
         CLI   RECFM+1,C'B'        CURRENT VALUE WITH X'10' WILL
         BNE   CHECK_ANSI          GIVE US THE NEEDED VALUE.
         OI    S99TUPAR,X'10'
CHECK_ANSI     EQU  *              IF ANSI REQUESTED, ALSO 'OR'
         CLI   RECFM+2,C'A'        WITH X'04'
         BNE   END_RECFM
         OI    S99TUPAR,X'04'
END_RECFM  EQU  *
         LA    R5,1
         BAL   R7,UPDATE_POINTERS
         EJECT
***********************************************************************
**       DIRECTORY BLOCK QUANTITY  X'000C'                           **
***********************************************************************
DIRQTY_PROCESSING EQU  *
         CLC   DIRQTY,=C'000'
         BE    END_DCB_PROCESSING
         CLC   DIRQTY,=C'   '
         BE    END_DCB_PROCESSING
         PACK  DOUB,DIRQTY
         CVB   R5,DOUB
         ST    R5,FWORD
         MVI   S99TUKEY+1,DALDIR       SET KEY FIELD = DIRECTORY BLOCK
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,3            SET LENGTH FIELD
         MVC   S99TUPAR(3),FWORD+1     MOVE IN QUANTITY REQUESTED
         LA    R5,3
         BAL   R7,UPDATE_POINTERS
END_DCB_PROCESSING EQU *
         L     R7,DCB_RETURN_ADDR
         BR    R7
         EJECT
*
*****************************************************************
*** THIS SUBROUTINE IS ENTERED VIA AN 'EX' INSTRUCTION TO ALLOW
*** VARIABLE LENGTH MOVES OF PARM DATA TO THE TEXT-UNIT AREA.
*****************************************************************
*
MOVE_PARM  EQU  *
         MVC   S99TUPAR(0),WORK_FIELD
*
         EJECT
*
*
*****************************************************************
***  THIS SUBROUTINE STORES THE ADDRESS OF THE JUST BUILT TEXT-
***  UNIT IN OUR LIST OF ADDRESSES. THEN IT BUMPS UP THE POINTER
***  (R10) 4 BYTES TO POINT TO THE NEXT POSITON IN THE LIST.
***  IT ALSO INCREMENTS R15 BY THE LENGTH OF THE JUST STORED
***  TEXT UNIT TO POINT TO THE NEXT UNUSED AREA.  THE OFFSET
***  OF 6 IS FAIRLY CONSTANT.  R5 IS USED AS AN INDEX TO INCREASE
***  INCREASE OR DECREASE THE DISPLACEMENT. (CAN BE POSITIVE OR
***  NEGATIVE !!).  IT IS SET JUST BEFORE EACH 'BAL'.
*****************************************************************
*
*
UPDATE_POINTERS  EQU  *
         ST    R7,UPDATE_POINTER_RETURN_ADDR
         ST    R15,0(R10)              STORE TEXT UNIT ADDRESS
         LA    R10,4(R10)              BUMP UP TEXT POINTER POSITION
         LA    R15,6(R5,R15)           POINT TO NEXT TEXT UNIT POSITION
         L     R7,UPDATE_POINTER_RETURN_ADDR
         BR    R7
         EJECT
***
*****************************************************************
***  SUBROUTINE TO FIND LENGTH OF PARAMETER VALUE
*****************************************************************
***
FIND_LENGTH EQU  *
         LA    R5,WORK_FIELD+43          POINT TO END OF WORK FIELD
         LA    R0,WORK_FIELD             POINT TO START OF WORK FIELD
CHECK_SPACE EQU *
         CLI   0(R5),X'40'        CHECK FOR SPACES
         BNE   FOUND_END          NOT SPACE? THEN WE'RE DONE
         BCT   R5,CHECK_SPACE     DECREMENT WORK FIELD POINTER
*                                 AND CHECK NEXT POSITION
FOUND_END EQU *
         SR    R5,R0              SUBTRACT END LENGTH FROM START
         BR    R7                 TO GIVE US LENGTH OF FIELD
         EJECT
***
***
*----------------------------------------------------------*
*     WORKING STORAGE                                      *
*----------------------------------------------------------*
SPACES                              DC    CL44' '
MEMORY   DSECT
SAVEAREA                            DC    18F'0'
GETMAIN_ADDR                        DS    F
RETURN_CODE_SAVE                    DS    F
LOWVAL                              DC    D'0'
DOUB                                DC    D'0'
FWORD                               DC    F'0'
DCB_RETURN_ADDR                     DC    F'0'
UPDATE_POINTER_RETURN_ADDR          DC    F'0'
BLOCKSIZE_SAVE                      DC    H'0'
WORK_FIELD                          DC    CL44' '
FIRST_TIME                          DC    C'Y'
*
DYN1RBP   DS   F                       SVC 99 REQ BLOCK POINTER
DYN1RB    DS   5F                      SVC 99 REQUEST BLOCK
DYN1TUP   DS   CL255                   SPACE FOR TEXT POINTERS
DYN1TU    DS   CL255                   SPACE FOR TEXT UNITS
DYN1LEN   EQU  *-DYN1RBP               LENGTH OF SPACE USED
MLENGTH  EQU *-SAVEAREA
*
         EJECT
*
* DSECT MACRO
         IEFZB4D0
*
         EJECT
* MNEMONICS MACRO
         IEFZB4D2
*
         EJECT
**********************************************************************
*   ALLOCATION PARAMETERS                                            *
**********************************************************************
**********************************************************************
*   ALLOCATION PARAMETERS                                            *
**********************************************************************
PARMS              DSECT
DDNAME             DS    CL8         DDNAME
DSNAME_PARMAMETERS DS    0C
DSNAME             DS    CL44        NAME OF DATASET TO BE ALLOCATED
MEMNAME            DS    CL8         MEMBER-NAME (IF DSORG = PO)
INIT               DS    CL1         DATASET INITIAL STATUS
*                                    N = NEW  O = OLD
*                                    M = MOD  S = SHR
NORM               DS    CL1         NORMAL DISP
*                                    C = CATALOG  D = DELETE  K = KEEP
COND               DS    CL1         CONDITIONAL DISP
*                                    C = CATALOG  D = DELETE  K = KEEP
PRISPC             DS    CL3         PRIMARY SPACE REQUESTED
SECSPC             DS    CL3         SECONDARY
TYPE               DS    CL1         TRACKS OR BLOCKS OR CYLINDERS
*                                    T = TRKS  C = CYL  B = BLKS
RLSE_FLAG          DS    CL1         RELEASE INDICATOR
*                                    Y = RELEASE UNUSED SPACE
ROUND_FLAG         DS    CL1         IS SPC IN BLOCKS, ROUND UP TO CYL?
*                                    Y = YES
CLOSE_FLAG         DS    CL1         UNNALLOC AT CLOSE?
*                                    Y = YES
SPACE_FORMAT       DS    CL4         FORMAT OF SPACE
*                                    ALX, MXIG, CONT
UNIT               DS    CL6         DEVICE TYPE
*                                    DEVICE TYPE OR GENERIC NAME
VOLSER             DS    CL6         VOLUME SERIAL
*
DCB_PARMAMETERS    DS    0C
DSORG              DS    CL3         DATASET ORGANIZATION
*                                    PS, PO, DA, PSU, POU, DAU
LRECL              DS    CL4         RECORD LENGTH
BLKSIZE            DS    CL5         BLOCKSIZE
DIRQTY             DS    CL3         DIRECTORY BLOCKS
RECFM              DS    CL3         RECORD FORMAT
*                                    F FB FBA V VB VBA U
EROPT              DS    CL2         ERROR OPTION
*                                    AB = ABEND AC = ACCEPT SK = SKIP
BUFNO              DS    CL2         NUMBER OF BUFFERS TO ALLOCATE
*                                    VALUE FROM 1 - 255 BINARY
*
SYSOUT_PARMAMETERS DS    0C
SYSOCLAS           DS    CL1     VALID SYSOUT SYSOUT CLASS
*                                IE: A, Q, L
SYSODEST           DS    CL8     REMOTE DESTINATION (FULL NAME)
*                                IE: R1, R14
SYSODISP           DS    CL1     DISPOSITON OF SYSOUT
*                                H = HOLD
SYSOCOPY           DS    CL2     NUMBER OF SYSOUT COPIES 1-255 BINARY
ERROR_CODES        DS    0C
SVCERROR           DS    CL2     SVC 99 ERROR REASON CODE
PRISPC2            DS    CL5     FOR LARGE PRIMARY SPC REQUESTS
FILLER             DS    CL45
         EJECT
         CSECT          PANVALET TIME STAMP
PANVALET DC    CL47'001D3ALLOCP  06/22/89 COMPILED 92140 -  7:57:19'
         END   D3ALLOCP
